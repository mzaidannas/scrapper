# To access data postgres and redis writes within container from host machine
volumes:
  postgres_data: {}
  redis_data: {}
  gem_cache: {}
  node_modules: {}

services:
  postgres:
    image: postgres:alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    network_mode: host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    network_mode: host
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  assets:
    stdin_open: true # docker run -i
    image: scrapper
    environment:
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - .:/var/www/scrapper
      - node_modules:/var/www/scrapper/node_modules
    command: bun run build --watch

  app:
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
      args:
        RAILS_ENV: ${RAILS_ENV:-development}
    image: scrapper
    depends_on:
      - postgres
      - redis
      - assets
    environment:
      RAILS_ENV: ${RAILS_ENV:-development}
    ports:
      - "3000:3000"
    network_mode: host
    volumes:
      - .:/var/www/scrapper
      - gem_cache:/usr/local/bundle/gems
      - node_modules:/var/www/scrapper/node_modules
    entrypoint: docker/app/entrypoint.sh
    # dont use entrypoint in production or staging
    command: bundle exec rails server -b 0.0.0.0

  worker:
    image: scrapper
    depends_on:
      - postgres
      - redis
    environment:
      RAILS_ENV: ${RAILS_ENV:-development}
    volumes:
      - .:/var/www/scrapper
      - gem_cache:/usr/local/bundle/gems
      - node_modules:/var/www/scrapper/node_modules
    command: bundle exec sidekiq -C config/sidekiq.yml

  web:
    build:
      context: .
      dockerfile: ./docker/web/Dockerfile
      args:
        RAILS_ENV: ${RAILS_ENV:-development}
    depends_on:
      - app
    ports:
      - 80:80
    network_mode: host
    volumes:
      - ./public:/var/www/scrapper/public
